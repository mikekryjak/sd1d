
#include <globals.hxx> // for mesh object
#include <output.hxx>
#include <boutexception.hxx>
#include <utils.hxx>

#include "radiation.hxx"

#include <fstream>
#include <string>
#include <sstream>

using std::string;

const Field3D RadiatedPower::power(const Field3D &Te, const Field3D &Ne, const Field3D &Ni) {
  Field3D result;
  result.allocate();
  
  for(const auto& i : result) {
    result[i] = power(Te[i], Ne[i], Ni[i]);
  }
  
  return result;
}

InterpRadiatedPower::InterpRadiatedPower(const string &filename) {
  std::ifstream file(filename.c_str());
  
  output.write("Loading data from file: %s\n", filename.c_str());

  if(!file.is_open())
    throw BoutException("InterpRadiatedPower: Couldn't open file %s\n", filename.c_str());

  string line;
  int linenr = 1;
  while( std::getline(file, line) ) {
    // Expecting either a comment, blank line, or two numbers
    // Remove comments, then whitespace from left and right
    string strippedline = trim( trimComments( line ) );
    
    if(strippedline.length() == 0)
      continue;
    
    std::stringstream ss(strippedline);
    BoutReal t, p;
    if( !(ss >> t) )
      throw BoutException("InterpRadiatedPower: file '%s' line %d: %s\n",
                          filename.c_str(), linenr, line.c_str());
    
    if( !(ss >> p) )
      throw BoutException("InterpRadiatedPower: file '%s' line %d: %s\n",
                          filename.c_str(), linenr, line.c_str());
    
    te_array.push_back(t);
    p_array.push_back(p);
  
    linenr++;
  }
  

  file.close();
}

BoutReal InterpRadiatedPower::power(BoutReal Te, BoutReal ne, BoutReal ni) {
  return 0.0;
}

////////////////////////////////////////////////////////////////
// 

BoutReal HydrogenRadiatedPower::power(BoutReal Te, BoutReal ne, BoutReal ni) {
  
}

// Collision rate coefficient <sigma*v> [m3/s]
BoutReal HydrogenRadiatedPower::ionisation(BoutReal T) {
  double fION;	//collision rate coefficient <sigma*v> [m3/s]
  double TT,X,S;

  TT=T;
  
  if (TT<1.0) TT=1.0;
  X=log10(TT);
  
  if (TT>=20.0) 
    S=-0.5151*X-2.563/X-5.231;
  else
    S=-3.054*X-15.72*exp(-X)+1.603*exp(-X*X);
  
  fION=pow(10.0,S-6.0);           
  
  return fION;
}

//<sigma*v> [m3/s]
BoutReal HydrogenRadiatedPower::recombination(BoutReal n, BoutReal T) {
  double fREC;	//<sigma*v> [m3/s]
  double TT,RDNE,RTE,DNE,E,RN,RT,RNJ,RTI,suma;
  int i,j,i1,j1;
  
  if(n < 1e3) // Log(n) used, so prevent NaNs
    return 0.0;
  
  double MATA[9][9]= {
    {-2.855728479302E+01, -7.664042607917E-01, -4.930424003280E-03, \
     -5.386830982777E-03, -1.626039237665E-04,  6.080907650243E-06, \
     2.101102051942E-05, -2.770717597683E-06,  1.038235939800E-07,}, 
    { 3.488563234375E-02, -3.583233366133E-03, -3.620245352252E-03, \
      -9.532840484460E-04,  1.888048628708E-04, -1.014890683861E-05, \
      2.245676563601E-05, -4.695982369246E-06,  2.523166611507E-07,}, 
    {-2.799644392058E-02, -7.452514292790E-03,  6.958711963182E-03, \
     4.631753807534E-04,  1.288577690147E-04, -1.145028889459E-04, \
     -2.245624273814E-06,  3.250878872873E-06, -2.145390398476E-07,},  
    { 1.209545317879E-02,  2.709299760454E-03, -2.139257298118E-03, \
      -5.371179699661E-04, -1.634580516353E-05,  5.942193980802E-05, \
      -2.944873763540E-06, -9.387290785993E-07,  7.381435237585E-08,},
    {-2.436630799820E-03, -7.745129766167E-04,  4.603883706734E-04, \
     1.543350502150E-04, -9.601036952725E-06, -1.211851723717E-05, \
     1.002105099354E-06,  1.392391630459E-07, -1.299713684966E-08,},
    { 2.837893719800E-04,  1.142444698207E-04, -5.991636837395E-05, \
      -2.257565836876E-05,  3.425262385387E-06,  1.118965496365E-06, \
      -1.291320799814E-07, -1.139093288575E-08,  1.265189576423E-09,},
    {-1.886511169084E-05, -9.382783518064E-06,  4.729262545726E-06, \
     1.730782954588E-06, -4.077019941998E-07, -4.275321573501E-08, \
     7.786155463269E-09,  5.178505597480E-10, -6.854203970018E-11,},
    { 6.752155602894E-07,  3.902800099653E-07, -1.993485395689E-07, \
      -6.618240780594E-08,  2.042041097083E-08,  3.708616111085E-10, \
      -2.441127783437E-10, -9.452402157390E-12,  1.836615031798E-12,},
    {-1.005893858779E-08, -6.387411585521E-09,  3.352589865190E-09, \
     1.013364275013E-09, -3.707977721109E-10,  7.068450112690E-12, \
     3.773208484020E-12, -4.672724022059E-14, -1.640492364811E-14,},
  };
	
  RDNE=n;
  RTE=T;
	
  DNE=RDNE;
  TT=RTE;
  E=DNE*1.0E-14;
	
  if (TT<1.0) TT=1.0;
	
  RN=log(E);
  RT=log(TT);
	
  suma=0.0;
  for (i=1;i<=9;i++)
    {
      i1=i-1;
      for (j=1;j<=9;j++)
        {
          j1=j-1;
          RNJ=pow(RN,j1);
          if ((RN==0.0) && (j1==0)) RNJ=1.0;
          RTI=pow(RT,i1);
          if ((RT==0.0) && (i1==0)) RTI=1.0;		
          suma=suma+MATA[j-1][i-1]*RNJ*RTI;
        }
    }

  fREC=exp(suma)*1.0E-6;

  return fREC;
}

// <sigma*v> [m3/s]
BoutReal HydrogenRadiatedPower::chargeExchange(BoutReal Te) {
  double fCX;		//<sigma*v> [m3/s]
  double TT,S;
  
  TT=Te;
  
  if (TT<1.0) TT=1.0;    
  S=-14.0+log10(TT)/3.0;
  
  fCX=pow(10.0,S); 
  
  return fCX;
}

// <sigma*v> [m3/s]
BoutReal HydrogenRadiatedPower::excitation(BoutReal Te) {
  double fEXC;	//<sigma*v> [m3/s]
  double TT,Y;
  
  TT=Te;
  
  if (TT<1.0) TT=1.0;
  Y=10.2/TT;
  
  fEXC=49.0E-14/(0.28+Y)*exp(-Y)*sqrt(Y*(1.0+Y));
  
  return fEXC;
}


/////////////////////////////////////////////////////////////////////////////


BoutReal UpdatedRadiatedPower::power(BoutReal Te, BoutReal ne, BoutReal ni) {
  throw BoutException("UpdatedRadiatedPower::power not implemented");
}


//<sigma*v> [m3/s]
BoutReal UpdatedRadiatedPower::recombination(BoutReal n, BoutReal T) {
  double TT, RDNE, RTE, DNE, E, RN, RT, RNJ, RTI, suma, fHAV, fRAD;
  int i, j, i1, j1;

  if (n < 1e3) // Log(n) used, so prevent NaNs
    return 0.0;

  if (T < 0.025) {
    T = 0.025; // 300K
  }

  double MATA[9][9] = {
      {
          -2.855728479302E+01, -7.664042607917E-01, -4.930424003280E-03,
          -5.386830982777E-03, -1.626039237665E-04, 6.080907650243E-06,
          2.101102051942E-05, -2.770717597683E-06, 1.038235939800E-07,
      },
      {
          3.488563234375E-02, -3.583233366133E-03, -3.620245352252E-03,
          -9.532840484460E-04, 1.888048628708E-04, -1.014890683861E-05,
          2.245676563601E-05, -4.695982369246E-06, 2.523166611507E-07,
      },
      {
          -2.799644392058E-02, -7.452514292790E-03, 6.958711963182E-03,
          4.631753807534E-04, 1.288577690147E-04, -1.145028889459E-04,
          -2.245624273814E-06, 3.250878872873E-06, -2.145390398476E-07,
      },
      {
          1.209545317879E-02, 2.709299760454E-03, -2.139257298118E-03,
          -5.371179699661E-04, -1.634580516353E-05, 5.942193980802E-05,
          -2.944873763540E-06, -9.387290785993E-07, 7.381435237585E-08,
      },
      {
          -2.436630799820E-03, -7.745129766167E-04, 4.603883706734E-04,
          1.543350502150E-04, -9.601036952725E-06, -1.211851723717E-05,
          1.002105099354E-06, 1.392391630459E-07, -1.299713684966E-08,
      },
      {
          2.837893719800E-04, 1.142444698207E-04, -5.991636837395E-05,
          -2.257565836876E-05, 3.425262385387E-06, 1.118965496365E-06,
          -1.291320799814E-07, -1.139093288575E-08, 1.265189576423E-09,
      },
      {
          -1.886511169084E-05, -9.382783518064E-06, 4.729262545726E-06,
          1.730782954588E-06, -4.077019941998E-07, -4.275321573501E-08,
          7.786155463269E-09, 5.178505597480E-10, -6.854203970018E-11,
      },
      {
          6.752155602894E-07, 3.902800099653E-07, -1.993485395689E-07,
          -6.618240780594E-08, 2.042041097083E-08, 3.708616111085E-10,
          -2.441127783437E-10, -9.452402157390E-12, 1.836615031798E-12,
      },
      {
          -1.005893858779E-08, -6.387411585521E-09, 3.352589865190E-09,
          1.013364275013E-09, -3.707977721109E-10, 7.068450112690E-12,
          3.773208484020E-12, -4.672724022059E-14, -1.640492364811E-14,
      },
  };

  RDNE = n;
  RTE = T;

  DNE = RDNE;
  TT = RTE;
  E = DNE * 1.0E-14;

  RN = log(E);
  RT = log(TT);

  suma = 0.0;
  for (i = 1; i <= 9; i++) {
    i1 = i - 1;
    for (j = 1; j <= 9; j++) {
      j1 = j - 1;
      RNJ = pow(RN, j1);
      if ((RN == 0.0) && (j1 == 0))
        RNJ = 1.0;
      RTI = pow(RT, i1);
      if ((RT == 0.0) && (i1 == 0))
        RTI = 1.0;
      suma = suma + MATA[j - 1][i - 1] * RNJ * RTI;
    }
  }

  fHAV = exp(suma) * 1.0E-6 / (1.0 + 0.125 * TT);

  double A = 3.92E-20;
  double B = 3.0E-124 * pow(1.6E-19, -4.5);
  double Ry = 13.60569;
  double chi = 0.35;

  fRAD = A * pow(Ry, 1.5) * 1.0 / (sqrt(TT) * (Ry + chi * TT));

  return fHAV + fRAD + B * DNE * pow(TT, -5.0);
}

// <sigma*v> [m3/s]
BoutReal UpdatedRadiatedPower::chargeExchange(BoutReal T) {
  if (T < 0.025) {
    T = 0.025; // 300K
  }

  double E = 10.0;

  double cxcoeffs[9][9] = {
      {
          -1.829079582E1, 1.640252721E-1, 3.364564509E-2, 9.530225559E-3,
          -8.519413900E-4, -1.247583861E-3, 3.014307546E-4, -2.499323170E-5,
          6.932627238E-7,
      },
      {
          2.169137616E-1, -1.106722014E-1, -1.382158680E-3, 7.348786287E-3,
          -6.343059502E-4, -1.919569450E-4, 4.075019352E-5, -2.850044983E-6,
          6.966822400E-8,
      },
      {
          4.307131244E-2, 8.948693625E-3, -1.209480567E-2, -3.675019470E-4,
          1.039643391E-3, -1.553840718E-4, 2.670827249E-6, 7.695300598E-7,
          -3.783302282E-8,
      },
      {
          -5.754895093E-4, 6.062141761E-3, 1.075907882E-3, -8.119301728E-4,
          8.911036876E-6, 3.175388950E-5, -4.515123642E-6, 2.187439284E-7,
          -2.911233952E-9,
      },
      {
          -1.552077120E-3, -1.210431588E-3, 8.297212634E-4, 1.361661817E-4,
          -1.008928628E-4, 1.080693990E-5, 5.106059414E-7, -1.299275586E-7,
          5.117133050E-9,
      },
      {
          -1.876800283E-4, -4.052878752E-5, -1.907025663E-4, 1.141663042E-5,
          1.775681984E-5, -3.149286924E-6, 3.105491555E-8, 2.274394089E-8,
          -1.130988251E-9,
      },
      {
          1.125490271E-4, 2.875900436E-5, 1.338839629E-5, -4.340802793E-6,
          -7.003521917E-7, 2.318308730E-7, -6.030983538E-9, -1.755944926E-9,
          1.005189187E-10,
      },
      {
          -1.238982763E-5, -2.616998140E-6, -1.171762874E-7, 3.517971869E-7,
          -4.928692833E-8, 1.756388999E-10, -1.446756796E-10, 7.143183138E-11,
          -3.989884106E-12,
      },
      {
          4.163596197E-7, 7.558092849E-8, -1.328404104E-8, -9.170850254E-9,
          3.208853884E-9, -3.952740759E-10, 2.739558476E-11, -1.693040209E-12,
          6.388219930E-14,
      },
  };

  double lograte = 0.0;
  for (int i = 0; i <= 8; i++) {
    for (int j = 0; j <= 8; j++) {
      lograte = lograte + cxcoeffs[i][j] * pow(log(T), i) * pow(log(E), j);
    }
  }

  return 1.0E-6 * exp(lograte);
}

// Original excitation rate
BoutReal UpdatedRadiatedPower::excitation_old(BoutReal Te) {
  double fEXC;	//<sigma*v> [m3/s]
  double TT,Y;
  
  TT=Te;
  
  if (TT<1.0) TT=1.0;
  Y=10.2/TT;
  
  fEXC=49.0E-14/(0.28+Y)*exp(-Y)*sqrt(Y*(1.0+Y));
  
  return fEXC;
}

// Original ionisation rate
// Collision rate coefficient <sigma*v> [m3/s]
BoutReal UpdatedRadiatedPower::ionisation_old(BoutReal T) {
    double fION; // Rate coefficient
    double TT;

    if (T < 0.025) {
      T = 0.025; // 300K
    }
    
    TT = T;

    double ioncoeffs[9] = {-3.271397E1, 1.353656E1, -5.739329, 1.563155, \
			   -2.877056E-1, 3.482560e-2, -2.631976E-3, \
			   1.119544E-4, -2.039150E-6};
    
    double lograte = 0.0;
    for (int i=0;i<=8;i++)
      {
	lograte = lograte + ioncoeffs[i]*pow(log(TT),i);
      }

    fION = exp(lograte)*1.0E-6;

    return fION;
}

// <sigma*v> [m3/s]
// COMES FROM AMJUEL H.4 2.1.5 (SAWADA)
BoutReal UpdatedRadiatedPower::ionisation(BoutReal n, BoutReal T) {
  // double TT, RDNE, RTE, DNE, E, RN, RT, RNJ, RTI, suma, fION;
  // int i, j, i1, j1;
  
  double E, suma, fION;
  int i, j;

  if (n < 1e3) // Log(n) used, so prevent NaNs
    return 0.0;

  if (T < 0.025) {
    T = 0.025; // 300K
  }

  double MATA[9][9] = {
      {
          -3.248025330340E+01, 1.425332391510E+01, -6.632235026785E+00,
          2.059544135448E+00, -4.425370331410E-01, 6.309381861496E-02,
          -5.620091829261E-03, 2.812016578355E-04, -6.011143453374E-06,
      },
      {
          -5.440669186583E-02, -3.594347160760E-02, 9.255558353174E-02,
          -7.562462086943E-02, 2.882634019199E-02, -5.788686535780E-03,
          6.329105568040E-04, -3.564132950345E-05, 8.089651265488E-07,
      },
      {
          9.048888225109E-02, -2.014729121556E-02, -5.580210154625E-03,
          1.519595967433E-02, -7.285771485050E-03, 1.507382955250E-03,
          -1.527777697951E-04, 7.222726811078E-06, -1.186212683668E-07,
      },
      {
          -4.054078993576E-02, 1.039773615730E-02, -5.902218748238E-03,
          5.803498098354E-04, 4.643389885987E-04, -1.201550548662E-04,
          8.270124691336E-06, 1.433018694347E-07, -2.381080756307E-08,
      },
      {
          8.976513750477E-03, -1.771792153042E-03, 1.295609806553E-03,
          -3.527285012725E-04, 1.145700685235E-06, 6.574487543511E-06,
          3.224101773605E-08, -1.097431215601E-07, 6.271173694534E-09,
      },
      {
          -1.060334011186E-03, 1.237467264294E-04, -1.056721622588E-04,
          3.201533740322E-05, 8.493662724988E-07, -9.678782818849E-07,
          4.377402649057E-08, 7.789031791949E-09, -5.483010244930E-10,
      },
      {
          6.846238436472E-05, -3.130184159149E-06, 4.646310029498E-06,
          -1.835196889733E-06, -1.001032516512E-08, 5.176265845225E-08,
          -2.622921686955E-09, -4.197728680251E-10, 3.064611702159E-11,
      },
      {
          -2.242955329604E-06, -3.051994601527E-08, -1.479612391848E-07,
          9.474014343303E-08, -1.476839184318E-08, 1.291551676860E-09,
          -2.259663431436E-10, 3.032260338723E-11, -1.355903284487E-12,
      },
      {
          2.890437688072E-08, 1.888148175469E-09, 2.852251258320E-09,
          -2.342505583774E-09, 6.047700368169E-10, -9.685157340473E-11,
          1.161438990709E-11, -8.911076930014E-13, 2.935080031599E-14,
      },
  };

  // RDNE = n;
  // RTE = T;

  // DNE = RDNE;
  // TT = RTE;
  // E = DNE * 1.0E-14;

  // RN = log(E);
  // RT = log(TT);

  // suma = 0.0;
  // for (i = 1; i <= 9; i++) {
    // i1 = i - 1;
    // for (j = 1; j <= 9; j++) {
      // j1 = j - 1;
      // RNJ = pow(RN, j1);
      // if ((RN == 0.0) && (j1 == 0))
        // RNJ = 1.0;
      // RTI = pow(RT, i1);
      // if ((RT == 0.0) && (i1 == 0))
        // RTI = 1.0;
      // suma = suma + MATA[j - 1][i - 1] * RNJ * RTI;
    // }
  // }
  
  E = n * 1.0E-14;
  E = log(E);
  T = log(T);
  
  suma = 0.0;
  
  for (i = 0; i <=8; i++) {
	  for (j = 0; j <= 8; j++) {
		  suma = suma + MATA[j][i] * pow(E,j) * pow(T,i);
	  }
  }

  fION = exp(suma)*1.0E-6;

  return fION;
}

// COMES FROM AMJUEL H.10 2.1.5 (SAWADA)
// This is an energy weighted rate (m-3s-1eV) for energy loss due to multistep ionisation in a 9 coefficient 2D polynomial fit
// It includes energy loss due to ionisation (i.e. 13.6eV) within it, so for SD1D's definition we need to separate this out later
// this is done in sd1d.cxx
BoutReal UpdatedRadiatedPower::excitation(BoutReal n, BoutReal T) {
  double E, suma, fEXC;
  int i, j;

  if (n < 1e3) // Log(n) used, so prevent NaNs
    return 0.0;

  if (T < 0.025) {
    T = 0.025; // 300K
  }

  double MATA[9][9] = {
      {
          -2.497580168306E+01, 1.004448839974E+01, -4.867952931298E+00,
          1.689422238067E+00, -4.103532320100E-01, 6.469718387357E-02,
          -6.215861314764E-03, 3.289809895460E-04, -7.335808238917E-06,
      },
      {
          1.081653961822E-03, -3.189474633369E-03, -5.852267850690E-03,
          7.744372210287E-03, -3.622291213236E-03, 8.268567898126E-04,
          -9.836595524255E-05, 5.845697922558E-06, -1.367574486885E-07,
      },
      {
          -7.358936044605E-04, 2.510128351932E-03, 2.867458651322E-03,
          -3.087364236497E-03, 1.327415215304E-03, -2.830939623802E-04,
          3.017296919092E-05, -1.479323780613E-06, 2.423236476442E-08,
      },
      {
          4.122398646951E-04, -7.707040988954E-04, -8.328668093987E-04,
          4.707676288420E-04, -1.424078519508E-04, 2.411848024960E-05,
          -1.474253805845E-06, -4.633029022577E-08, 5.733871119707E-09,
      },
      {
          -1.408153300988E-04, 1.031309578578E-04, 2.056134355492E-04,
          -5.508611815406E-05, 3.307339563081E-06, 5.707984861100E-07,
          -2.397868837417E-07, 3.337390374041E-08, -1.512777532459E-09,
      },
      {
          2.469730836220E-05, -3.716939423005E-06, -3.301570807523E-05,
          7.305867762241E-06, 5.256679519499E-09, -1.016945693300E-07,
          1.518743025531E-08, -1.770252084837E-09, 8.733801272834E-11,
      },
      {
          -2.212823709798E-06, -4.249704742353E-07, 2.831739755462E-06,
          -6.000115718138E-07, 7.597020291557E-10, 3.517154874443E-09,
          4.149084521319E-10, -5.289806153651E-11, 7.196798841269E-13,
      },
      {
          9.648139704737E-08, 4.164960852522E-08, -1.164969298033E-07,
          2.045211951761E-08, 1.799505288362E-09, -4.453195673947E-10,
          -6.803200444549E-12, 3.864394776250E-12, -1.441033650378E-13,
      },
      {
          -1.611904413846E-09, -9.893423877739E-10, 1.785440278790E-09,
          -1.790312871690E-10, -9.280890205774E-11, 2.002478264932E-11,
          -1.151855939531E-12, -8.694978774411E-15, 1.734769090475E-15,
      },
  };

  // RDNE = n;
  // RTE = T;

  // DNE = RDNE;
  // TT = RTE;
  // E = DNE * 1.0E-14;

  // RN = log(E);
  // RT = log(TT);

  // suma = 0.0;
  // for (i = 1; i <= 9; i++) {
    // i1 = i - 1;
    // for (j = 1; j <= 9; j++) {
      // j1 = j - 1;
      // RNJ = pow(RN, j1);
      // if ((RN == 0.0) && (j1 == 0))
        // RNJ = 1.0;
      // RTI = pow(RT, i1);
      // if ((RT == 0.0) && (i1 == 0))
        // RTI = 1.0;
      // suma = suma + MATA[j - 1][i - 1] * RNJ * RTI;
    // }
  // }

  // fEXC = exp(suma)*1.0E-6;
  
  E = n * 1.0E-14;
  E = log(E);
  T = log(T);
  
  suma = 0.0;
  
  for (i = 0; i <=8; i++) {
	  for (j = 0; j <= 8; j++) {
		  suma = suma + MATA[j][i] * pow(E,j) * pow(T,i);
	  }
  }

  fEXC = exp(suma)*1.0E-6;
  return fEXC;
}

// The below comes from the work of Yulin Zhou
// Take AMJUEL rates for excited state populations from n=2 to n=6 (H.12 2.1.5a - 2.1.5e)
// Then use Yacora spontaneous de-excitation coefficients
/////////////////////   Excitation ////////////////////
///Channel H////////

BoutReal UpdatedRadiatedPower::Channel_H_2_amjuel(BoutReal T,BoutReal Ne) {
  if (T < 0.025) {
    T = 0.025; // 300K
  }
  double Channel_H_RateCoefficient_2,rate_Channel_H,TT,NN;
  TT = T;
  NN=Ne*1.0e-14;

  double Channel_H_coeffs_2[9][9]= {{-2.888782240542E+01, 9.694042304562E-01, 4.613129045722E-02,
                               -2.216757216719E-02, 5.067711671376E-03, -6.212032986616E-04,
                               4.172445968364E-05, -1.439572350231E-06, 1.978486731178E-08,},
                              {9.909537514500E+00, -4.163537878599E-02, 2.444011013342E-02,
                               -5.092551836572E-03, 4.080645015829E-04, -5.739581031596E-06,
                               -6.441112682031E-07, 1.766524953307E-08, 4.500335193180E-11,},
                              {-4.942743781185E+00, 1.230545313063E-02, -1.289174377763E-02,
                               4.174980751883E-03, -5.559754475561E-04, 2.207616832672E-05,
                               1.604359947467E-06, -1.668549821257E-07, 3.956288361818E-09,},
                              {1.715668267417E+00, 3.034149311755E-02, -1.837812030403E-02,
                               3.719122644080E-03, -2.039974521144E-04, -2.170634046629E-05,
                               3.319046346231E-06, -1.530562339677E-07, 2.467744887550E-09,},
                              {-4.508004155190E-01, -1.136449435241E-02, 7.857406065923E-03,
                               -1.818309410916E-03, 1.348196284756E-04, 7.621772971297E-06,
                               -1.742105663717E-06, 9.539025646066E-08, -1.764749848063E-09,},
                              {9.042516000563E-02, -2.874540451423E-03, 1.787805444265E-03,
                               -4.049163510078E-04, 3.839701084642E-05, -1.182790529172E-06,
                               -3.224230256996E-08, 2.293257666191E-09, -2.626033062059E-11,},
                              {-1.280973933282E-02, 1.947546784046E-03, -1.325209820376E-03,
                               3.200749637228E-04, -3.075854301471E-05, 4.485031199179E-07,
                               1.187820950781E-07, -7.725204735890E-09, 1.455730327605E-10,},
                              {1.084341450206E-03, -3.175349945580E-04, 2.227323600480E-04,
                               -5.559573928329E-05, 5.656373947352E-06, -1.236115053324E-07,
                               -1.829679294498E-08, 1.312011360384E-09, -2.576831583186E-11,},
                              {-3.974359134401E-05, 1.688199339120E-05, -1.209472946500E-05,
                               3.100021285561E-06, -3.323560174565E-07, 9.896407186442E-09,
                               8.003219743811E-10, -6.578827971726E-11, 1.343525928267E-12,}
                             };

  Channel_H_RateCoefficient_2=0;

if (NN<=1.0) {
     for (int i = 0;i <= 8;i++) {
          Channel_H_RateCoefficient_2 += Channel_H_coeffs_2[i][0]*pow(log(TT),i);
     }
     rate_Channel_H = exp(Channel_H_RateCoefficient_2);

}else{
     for (int i=0;i<=8;i++){
         for (int j=0;j<=8;j++){
             Channel_H_RateCoefficient_2 += Channel_H_coeffs_2[i][j]*pow(log(TT),i)*pow(log(NN),j);
         }
     }
     rate_Channel_H = exp(Channel_H_RateCoefficient_2);
}
return rate_Channel_H;
}

///////////channel H(3)//////////////
BoutReal UpdatedRadiatedPower::Channel_H_3_amjuel(BoutReal T,BoutReal Ne) {
  if (T < 0.025) {
    T = 0.025; // 300K
  }
  double Channel_H_RateCoefficient_3,rate_Channel_H,TT,NN;
  TT = T;
  NN=Ne*1.0e-14;

  double Channel_H_coeffs_3[9][9]= {{-3.082877684472E+01, 9.740982428834E-01, 2.693447564427E-02,
                               -9.004934091051E-03, 1.222843687947E-03, -5.210804049741E-05,
                               -2.739765256223E-06, 2.927097984040E-07, -6.646459819509E-09,},
                              {1.187030265272E+01, 1.968338090648E-02, -2.495504765088E-02,
                               1.123130855030E-02, -2.651909936461E-03, 3.534709147248E-04,
                               -2.632450715422E-05, 9.987762315441E-07, -1.501421276021E-08,},
                              {-5.889482037865E+00, -8.737684945730E-03, 9.951688266911E-03,
                               -5.241271640755E-03, 1.372483328336E-03, -1.917275090304E-04,
                               1.441627470961E-05, -5.481720522735E-07, 8.264009775214E-09,},
                              {2.017399399792E+00, -1.014609925009E-02, 1.040081859210E-02,
                               -3.478025606446E-03, 5.572774095384E-04, -4.848784231802E-05,
                               2.416915703008E-06, -6.658457254421E-08, 8.215818515744E-10,},
                              {-5.303360302839E-01, 3.297808176838E-03, -2.712205422397E-03,
                               8.454526208306E-04, -1.362168127545E-04, 1.306146151315E-05,
                               -7.772290534634E-07, 2.655224800515E-08, -3.968977724198E-10,},
                              {1.080451047951E-01, 9.673290806118E-04, -1.096708705743E-03,
                               3.872258199271E-04, -6.353971343367E-05, 5.417022322731E-06,
                               -2.470245979511E-07, 5.722044899754E-09, -5.443566855045E-11,},
                              {-1.555010466762E-02, -5.167168286670E-04, 4.637911190482E-04,
                               -1.380893374707E-04, 1.849429028886E-05, -1.166761555949E-06,
                               2.955124264492E-08, 3.184408123607E-11, -8.216232831023E-12,},
                              {1.327158680898E-03, 7.389473703435E-05, -5.797555862425E-05,
                               1.440341699187E-05, -1.290902554237E-06, -4.889963932464E-09,
                               7.390396686250E-09, -4.052521721349E-10, 6.720841155202E-12,},
                              {-4.872105203992E-05, -3.537584073064E-06, 2.453443334473E-06,
                               -4.745956710582E-07, 5.546604517157E-09, 7.579547673173E-09,
                               -8.635578634097E-10, 3.738695038824E-11, -5.757075610089E-13,},
                             };

  Channel_H_RateCoefficient_3=0;

if (NN<=1.0) {
     for (int i = 0;i <= 8;i++) {
          Channel_H_RateCoefficient_3 += Channel_H_coeffs_3[i][0]*pow(log(TT),i);
     }
     rate_Channel_H = exp(Channel_H_RateCoefficient_3);

}else{
     for (int i=0;i<=8;i++){
         for (int j=0;j<=8;j++){
             Channel_H_RateCoefficient_3 += Channel_H_coeffs_3[i][j]*pow(log(TT),i)*pow(log(NN),j);
         }
     }
     rate_Channel_H = exp(Channel_H_RateCoefficient_3);
}
return rate_Channel_H;
}


///////////channel H(4)//////////////
BoutReal UpdatedRadiatedPower::Channel_H_4_amjuel(BoutReal T,BoutReal Ne) {
  if (T < 0.025) {
    T = 0.025; // 300K
  }
  double Channel_H_RateCoefficient_4,rate_Channel_H,TT,NN;
  TT = T;
  NN=Ne*1.0e-14;

  double Channel_H_coeffs_4[9][9]= {{-3.121459339796E+01, 8.335828009713E-01, 2.325042085123E-01,
                               -1.096388203376E-01, 2.434624647621E-02, -2.848412091044E-03,
                               1.789669578362E-04, -5.712451213773E-06, 7.267386885023E-08,},
                              {1.250950592132E+01, 9.112878380113E-03, -5.491646502669E-02,
                               2.972045500915E-02, -6.752777629102E-03, 7.907482466413E-04,
                               -5.078726612521E-05, 1.694110618282E-06, -2.296731891384E-08,},
                              {-6.229984587067E+00, -1.938627422961E-02, 1.621303063286E-02,
                               -6.819605362801E-03, 1.639046907231E-03, -2.316409264833E-04,
                               1.859544292047E-05, -7.663932535000E-07, 1.248233937322E-08,},
                              {2.142105600364E+00, 3.084489232048E-02, -3.147946146487E-03,
                               -4.981563534979E-03, 1.797076203455E-03, -2.547644660956E-04,
                               1.790413918002E-05, -6.225635876900E-07, 8.589352663796E-09,},
                              {-5.615155300856E-01, -5.885518785970E-03, -1.131771898094E-03,
                               2.277414510956E-03, -7.295707497520E-04, 1.047093315160E-04,
                               -7.734966472367E-06, 2.868598630187E-07, -4.235795995646E-09,},
                              {1.127449459065E-01, -6.211271050025E-03, 3.856805502108E-03,
                               -9.720154554360E-04, 1.201895430371E-04, -7.956678504065E-06,
                               2.942004754571E-07, -6.030861909870E-09, 5.715848860621E-11,},
                              {-1.590343046823E-02, 2.950230045038E-03, -1.748272049931E-03,
                               3.838584264558E-04, -3.212460389716E-05, -8.181068284295E-08,
                               1.721805311242E-07, -9.730371684031E-09, 1.730299677672E-10,},
                              {1.333705010633E-03, -4.583201098446E-04, 2.858630200307E-04,
                               -6.739012881651E-05, 6.684315041032E-06, -1.703080933280E-07,
                               -1.655594650506E-08, 1.235894145239E-09, -2.408500349383E-11,},
                              {-4.836027605927E-05, 2.417569815070E-05, -1.585276481393E-05,
                               4.013119711268E-06, -4.619672863742E-07, 2.215787076654E-08,
                               2.731478375019E-11, -3.750344543532E-11, 9.061707694269E-13,},};
  Channel_H_RateCoefficient_4=0;

if (NN<=1.0) {
     for (int i = 0;i <= 8;i++) {
          Channel_H_RateCoefficient_4 += Channel_H_coeffs_4[i][0]*pow(log(TT),i);
     }
     rate_Channel_H = exp(Channel_H_RateCoefficient_4);

}else{
     for (int i=0;i<=8;i++){
         for (int j=0;j<=8;j++){
             Channel_H_RateCoefficient_4 += Channel_H_coeffs_4[i][j]*pow(log(TT),i)*pow(log(NN),j);
         }
     }
     rate_Channel_H = exp(Channel_H_RateCoefficient_4);
}
return rate_Channel_H;
}

///////////channel H(5)//////////////
BoutReal UpdatedRadiatedPower::Channel_H_5_amjuel(BoutReal T,BoutReal Ne) {
  if (T < 0.025) {
    T = 0.025; // 300K
  }
  double Channel_H_RateCoefficient_5,rate_Channel_H,TT,NN;
  TT = T;
  NN=Ne*1.0e-14;

  double Channel_H_coeffs_5[9][9]= {{-3.126718125624E+01, 9.282945460974E-01, 1.070213380676E-01,
                               -5.984835557747E-02, 1.574482420977E-02, -2.152803383431E-03,
                               1.533450613139E-04, -5.416190220272E-06, 7.503092506245E-08,},
                              {1.281374709913E+01, 3.573873112144E-02, -4.872701879146E-02,
                               2.122340688681E-02, -4.335261058803E-03, 4.511000731668E-04,
                               -2.514757812007E-05, 7.098607959133E-07, -7.948198678409E-09,},
                              {-6.380408105491E+00, -1.144110981890E-03, -4.680598150266E-05,
                               4.899399906199E-04, -1.730051136321E-04, 2.045111743029E-05,
                               -4.780097207035E-07, -3.664829135622E-08, 1.435704784493E-09,},
                              {2.191577061685E+00, -5.161589020256E-03, 6.439656957369E-03,
                               -2.595193985854E-03, 5.083896758770E-04, -5.001475048416E-05,
                               2.378856833473E-06, -4.662729327187E-08, 1.885707833825E-10,},
                              {-5.751755938054E-01, 1.676622419964E-03, -1.568501026478E-03,
                               5.235042780927E-04, -8.901350181088E-05, 8.437562876296E-06,
                               -4.722754735716E-07, 1.525662957088E-08, -2.277373255316E-10,},
                              {1.157406495600E-01, 1.486290009897E-04, -1.404765081110E-04,
                               1.953433357615E-05, 3.171136646292E-06, -1.281135706652E-06,
                               1.539182389681E-07, -7.795475709363E-09, 1.408203935795E-10,},
                              {-1.631671197369E-02, -2.016003370833E-04, 1.639222741263E-04,
                               -3.782479181914E-05, 2.829273502486E-06, 1.645529677700E-07,
                               -3.844013350899E-08, 2.070018927471E-09, -3.568996816514E-11,},
                              {1.362647208936E-03, 3.901702147732E-05, -3.141140575728E-05,
                               7.810730453019E-06, -7.640509497691E-07, 9.357372398314E-09,
                               3.398945819263E-09, -2.120439941817E-10, 3.643140818164E-12,},
                              {-4.908854946631E-05, -2.325049769834E-06, 1.888930116590E-06,
                               -4.970298877362E-07, 5.607762235203E-08, -2.232480288100E-09,
                               -6.095037813579E-11, 6.718495301125E-12, -1.229967242093E-13},};
  Channel_H_RateCoefficient_5=0;

if (NN<=1.0) {
     for (int i = 0;i <= 8;i++) {
          Channel_H_RateCoefficient_5 += Channel_H_coeffs_5[i][0]*pow(log(TT),i);
     }
     rate_Channel_H = exp(Channel_H_RateCoefficient_5);

}else{
     for (int i=0;i<=8;i++){
         for (int j=0;j<=8;j++){
             Channel_H_RateCoefficient_5 += Channel_H_coeffs_5[i][j]*pow(log(TT),i)*pow(log(NN),j);
         }
     }
     rate_Channel_H = exp(Channel_H_RateCoefficient_5);
}
return rate_Channel_H;
}

///////////channel H(6)//////////////
BoutReal UpdatedRadiatedPower::Channel_H_6_amjuel(BoutReal T,BoutReal Ne) {
  if (T < 0.025) {
    T = 0.025; // 300K
  }
  double Channel_H_RateCoefficient_6,rate_Channel_H,TT,NN;
  TT = T;
  NN=Ne*1.0e-14;

  double Channel_H_coeffs_6[9][9]= {{-3.118788806329E+01, 1.051705868661E+00, -6.954764617920E-02,
                               2.612329534702E-02, -3.911384137475E-03, 1.474794675693E-04,
                               9.191757017392E-06, -7.898231632650E-07, 1.514512376570E-08,},
                              {1.300365034969E+01, 5.806024278787E-02, -7.054107872877E-02,
                               3.209814487839E-02, -7.336538391803E-03, 8.838327301328E-04,
                               -5.779085565904E-05, 1.935287412436E-06, -2.603161887414E-08,},
                              {-6.464611656902E+00, -3.350148712230E-02, 3.809632279775E-02,
                               -1.663574690203E-02, 3.667522832624E-03, -4.409479869479E-04,
                               2.975048782418E-05, -1.054940416948E-06, 1.523660684271E-08,},
                              {2.198690942590E+00, -1.651116960139E-02, 1.248202030331E-02,
                               -3.600008781362E-03, 5.273464947078E-04, -4.137511227236E-05,
                               1.553774051571E-06, -1.704433673171E-08, -2.016881015852E-10,},
                              {-5.762198964354E-01, 8.782966049217E-03, -7.253814512300E-03,
                               2.434417487959E-03, -4.385057360151E-04, 4.589037396076E-05,
                               -2.785668187173E-06, 9.065547432614E-08, -1.223436753078E-09,},
                              {1.190459835777E-01, 7.937734220940E-04, -3.032198147605E-04,
                               -6.693627833492E-05, 4.755833322780E-05, -8.654363224389E-06,
                               7.303664535216E-07, -2.952279140710E-08, 4.597194098628E-10,},
                              {-1.758172528529E-02, -8.425168421647E-04, 4.935184501531E-04,
                               -8.020637279277E-05, -2.254322145665E-06, 1.858918078917E-06,
                               -1.970736415814E-07, 8.619751903229E-09, -1.383868509607E-10,},
                              {1.540671110406E-03, 1.322737632505E-04, -7.161027491097E-05,
                               9.120131097155E-06, 1.138969748088E-06, -3.791832116704E-07,
                               3.596045684588E-08, -1.495930494169E-09, 2.332244458469E-11,},
                              {-5.782468318198E-05, -6.483373521666E-06, 3.088146690349E-06,
                               -1.704370060355E-07, -1.258928004543E-07, 2.744344149529E-08,
                               -2.357827363714E-09, 9.371149524100E-11, -1.424213663602E-12,},};
  Channel_H_RateCoefficient_6=0;

if (NN<=1.0) {
     for (int i = 0;i <= 8;i++) {
          Channel_H_RateCoefficient_6 += Channel_H_coeffs_6[i][0]*pow(log(TT),i);
     }
     rate_Channel_H = exp(Channel_H_RateCoefficient_6);

}else{
     for (int i=0;i<=8;i++){
         for (int j=0;j<=8;j++){
             Channel_H_RateCoefficient_6 += Channel_H_coeffs_6[i][j]*pow(log(TT),i)*pow(log(NN),j);
         }
     }
     rate_Channel_H = exp(Channel_H_RateCoefficient_6);
}
return rate_Channel_H;
}

